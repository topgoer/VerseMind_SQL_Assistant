name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sql_assistant_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-timeout ruff
        
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/sql_assistant_test" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "DB_NAME=sql_assistant_test" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=dummy_key_for_tests" >> $GITHUB_ENV
        echo "JWT_PUBLIC_KEY=dummy_jwt_public_key_for_tests" >> $GITHUB_ENV
        echo "ENABLE_MCP=1" >> $GITHUB_ENV
        
    - name: Lint with ruff
      run: |
        ruff check sql_assistant tests
        
    - name: Run unit tests
      run: |
        PYTHONPATH=. pytest tests/unit/ --cov=sql_assistant --cov-report=xml
        
    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        
    - name: Setup database for integration tests
      env:
        PGPASSWORD: postgres
      run: |
        # Create test database if it doesn't exist
        psql -h localhost -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'sql_assistant_test'" | grep -q 1 || psql -h localhost -U postgres -c "CREATE DATABASE sql_assistant_test"
        # Run test-specific database setup
        python tests/setup_test_db.py

    - name: Run integration tests
      run: |
        PYTHONPATH=. pytest tests/integration/ --cov=sql_assistant --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
        
    - name: Lint frontend
      working-directory: ./frontend
      run: npm run lint
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Test frontend
      working-directory: ./frontend
      run: npm test

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # Temporarily disabled Docker push - uncomment when Docker Hub credentials are properly configured
    # - name: Login to DockerHub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build Docker image (without push)
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: sql-assistant:latest
        # cache-from: type=registry,ref=yourusername/sql-assistant:buildcache
        # cache-to: type=registry,ref=yourusername/sql-assistant:buildcache,mode=max
